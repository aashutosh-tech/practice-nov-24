Creating a project with React for the frontend, Node.js for the backend, and MongoDB for the database involves several steps. Here's a complete guide, including folder structure, file codes, and instructions to run the project.

---

### Project Structure
```
my-app/
├── backend/
│   ├── node_modules/
│   ├── controllers/
│   │   └── userController.js
│   ├── models/
│   │   └── userModel.js
│   ├── routes/
│   │   └── userRoutes.js
│   ├── .env
│   ├── server.js
│   ├── package.json
├── frontend/
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   │   └── UserForm.js
│   │   ├── App.js
│   │   ├── index.js
│   ├── .env
│   ├── package.json
├── README.md
```

---

### Step 1: Backend Setup

#### 1. **Initialize Backend**
Run:
```bash
mkdir backend
cd backend
npm init -y
npm install express mongoose dotenv body-parser cors
```

#### 2. **File: `server.js`**
```javascript
const express = require('express');
const dotenv = require('dotenv');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const cors = require('cors');
const userRoutes = require('./routes/userRoutes');

dotenv.config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Routes
app.use('/api/users', userRoutes);

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log("MongoDB Connected"))
.catch(err => console.log(err));

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
```

#### 3. **File: `.env`**
```env
MONGO_URI=mongodb://localhost:27017/myapp
```

#### 4. **Folder: `models/`**

**File: `userModel.js`**
```javascript
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
});

const User = mongoose.model('User', userSchema);

module.exports = User;
```

#### 5. **Folder: `controllers/`**

**File: `userController.js`**
```javascript
const User = require('../models/userModel');

exports.addUser = async (req, res) => {
    const { name, email } = req.body;

    try {
        const user = new User({ name, email });
        await user.save();
        res.status(201).json(user);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
};

exports.getUsers = async (req, res) => {
    try {
        const users = await User.find();
        res.status(200).json(users);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};
```

#### 6. **Folder: `routes/`**

**File: `userRoutes.js`**
```javascript
const express = require('express');
const { addUser, getUsers } = require('../controllers/userController');

const router = express.Router();

router.post('/', addUser);
router.get('/', getUsers);

module.exports = router;
```

---

### Step 2: Frontend Setup

#### 1. **Initialize Frontend**
Run:
```bash
cd ..
npx create-react-app frontend
cd frontend
npm install axios
```

#### 2. **File: `.env`**
```env
REACT_APP_BACKEND_URL=http://localhost:5000
```

#### 3. **Folder: `src/components/`**

**File: `UserForm.js`**
```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const UserForm = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [users, setUsers] = useState([]);

    const fetchUsers = async () => {
        try {
            const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/users`);
            setUsers(response.data);
        } catch (err) {
            console.error(err);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            await axios.post(`${process.env.REACT_APP_BACKEND_URL}/api/users`, { name, email });
            fetchUsers();
            setName('');
            setEmail('');
        } catch (err) {
            console.error(err);
        }
    };

    return (
        <div>
            <h1>User Form</h1>
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    placeholder="Name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                />
                <input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                />
                <button type="submit">Add User</button>
            </form>
            <h2>User List</h2>
            <ul>
                {users.map(user => (
                    <li key={user._id}>{user.name} - {user.email}</li>
                ))}
            </ul>
        </div>
    );
};

export default UserForm;
```

#### 4. **File: `App.js`**
```javascript
import React from 'react';
import UserForm from './components/UserForm';

function App() {
    return (
        <div className="App">
            <UserForm />
        </div>
    );
}

export default App;
```

#### 5. **File: `index.js`**
```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
    document.getElementById('root')
);
```

---

### Step 3: Running the Project

1. **Start MongoDB**:
   ```bash
   mongod
   ```

2. **Start Backend**:
   ```bash
   cd backend
   node server.js
   ```

3. **Start Frontend**:
   ```bash
   cd frontend
   npm start
   ```

4. **Access the App**:
   Open `http://localhost:3000` in your browser.

---

This setup ensures your project has a functional frontend, backend, and database integration. Let me know if you need further assistance!
